{"ast":null,"code":"import{useEffect,useRef}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{setRef,setCaretRef}from\"store/actions\";import\"stylesheets/Test.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Test(){var _useSelector=useSelector(function(state){return state;}),_useSelector$word=_useSelector.word,typedWord=_useSelector$word.typedWord,currWord=_useSelector$word.currWord,wordList=_useSelector$word.wordList,typedHistory=_useSelector$word.typedHistory,timer=_useSelector.time.timer;var dispatch=useDispatch();var extraLetters=typedWord.slice(currWord.length).split(\"\");var activeWord=useRef(null);var caretRef=useRef(null);useEffect(function(){dispatch(setRef(activeWord));dispatch(setCaretRef(caretRef));},[dispatch]);return/*#__PURE__*/_jsxs(\"div\",{className:\"test\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"timer\",children:timer}),/*#__PURE__*/_jsx(\"div\",{className:\"box\",children:wordList.map(function(word,idx){var isActive=currWord===word&&typedHistory.length===idx;return/*#__PURE__*/_jsxs(\"div\",{className:\"word\",ref:isActive?activeWord:null,children:[isActive?/*#__PURE__*/_jsx(\"span\",{ref:caretRef,id:\"caret\",className:\"blink\",style:{left:typedWord.length*14.5833},children:\"|\"}):null,word.split(\"\").map(function(char,charId){return/*#__PURE__*/_jsx(\"span\",{children:char},char+charId);}),isActive?extraLetters.map(function(char,charId){return/*#__PURE__*/_jsx(\"span\",{className:\"wrong extra\",children:char},char+charId);}):typedHistory[idx]?typedHistory[idx].slice(wordList[idx].length).split(\"\").map(function(char,charId){return/*#__PURE__*/_jsx(\"span\",{className:\"wrong extra\",children:char},char+charId);}):null]},word+idx);})})]});}","map":{"version":3,"names":["useEffect","useRef","useDispatch","useSelector","setRef","setCaretRef","Test","state","word","typedWord","currWord","wordList","typedHistory","timer","time","dispatch","extraLetters","slice","length","split","activeWord","caretRef","map","idx","isActive","left","char","charId"],"sources":["D:/Belajar/typing-test/src/components/Test.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setRef, setCaretRef } from \"store/actions\";\r\nimport { State } from \"store/reducer\";\r\nimport \"stylesheets/Test.scss\";\r\n\r\nexport default function Test() {\r\n    const {\r\n        word: { typedWord, currWord, wordList, typedHistory },\r\n        time: { timer },\r\n    } = useSelector((state: State) => state);\r\n    const dispatch = useDispatch();\r\n    const extraLetters = typedWord.slice(currWord.length).split(\"\");\r\n    const activeWord = useRef<HTMLDivElement>(null);\r\n    const caretRef = useRef<HTMLSpanElement>(null);\r\n\r\n    useEffect(() => {\r\n        dispatch(setRef(activeWord));\r\n        dispatch(setCaretRef(caretRef));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"test\">\r\n            <div className=\"timer\">{timer}</div>\r\n            <div className=\"box\">\r\n                {wordList.map((word, idx) => {\r\n                    const isActive =\r\n                        currWord === word && typedHistory.length === idx;\r\n                    return (\r\n                        <div\r\n                            key={word + idx}\r\n                            className=\"word\"\r\n                            ref={isActive ? activeWord : null}>\r\n                            {isActive ? (\r\n                                <span\r\n                                    ref={caretRef}\r\n                                    id=\"caret\"\r\n                                    className=\"blink\"\r\n                                    style={{\r\n                                        left: typedWord.length * 14.5833,\r\n                                    }}>\r\n                                    |\r\n                                </span>\r\n                            ) : null}\r\n                            {word.split(\"\").map((char, charId) => {\r\n                                return <span key={char + charId}>{char}</span>;\r\n                            })}\r\n                            {isActive\r\n                                ? extraLetters.map((char, charId) => {\r\n                                      return (\r\n                                          <span\r\n                                              key={char + charId}\r\n                                              className=\"wrong extra\">\r\n                                              {char}\r\n                                          </span>\r\n                                      );\r\n                                  })\r\n                                : typedHistory[idx]\r\n                                ? typedHistory[idx]\r\n                                      .slice(wordList[idx].length)\r\n                                      .split(\"\")\r\n                                      .map((char, charId) => {\r\n                                          return (\r\n                                              <span\r\n                                                  key={char + charId}\r\n                                                  className=\"wrong extra\">\r\n                                                  {char}\r\n                                              </span>\r\n                                          );\r\n                                      })\r\n                                : null}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,KAAQ,OAAO,CACzC,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,MAAM,CAAEC,WAAW,KAAQ,eAAe,CAEnD,MAAO,uBAAuB,CAAC,wFAE/B,cAAe,SAASC,KAAI,EAAG,CAC3B,iBAGIH,WAAW,CAAC,SAACI,KAAY,QAAKA,MAAK,GAAC,gCAFpCC,IAAI,CAAIC,SAAS,mBAATA,SAAS,CAAEC,QAAQ,mBAARA,QAAQ,CAAEC,QAAQ,mBAARA,QAAQ,CAAEC,YAAY,mBAAZA,YAAY,CAC3CC,KAAK,cAAbC,IAAI,CAAID,KAAK,CAEjB,GAAME,SAAQ,CAAGb,WAAW,EAAE,CAC9B,GAAMc,aAAY,CAAGP,SAAS,CAACQ,KAAK,CAACP,QAAQ,CAACQ,MAAM,CAAC,CAACC,KAAK,CAAC,EAAE,CAAC,CAC/D,GAAMC,WAAU,CAAGnB,MAAM,CAAiB,IAAI,CAAC,CAC/C,GAAMoB,SAAQ,CAAGpB,MAAM,CAAkB,IAAI,CAAC,CAE9CD,SAAS,CAAC,UAAM,CACZe,QAAQ,CAACX,MAAM,CAACgB,UAAU,CAAC,CAAC,CAC5BL,QAAQ,CAACV,WAAW,CAACgB,QAAQ,CAAC,CAAC,CACnC,CAAC,CAAE,CAACN,QAAQ,CAAC,CAAC,CAEd,mBACI,aAAK,SAAS,CAAC,MAAM,wBACjB,YAAK,SAAS,CAAC,OAAO,UAAEF,KAAK,EAAO,cACpC,YAAK,SAAS,CAAC,KAAK,UACfF,QAAQ,CAACW,GAAG,CAAC,SAACd,IAAI,CAAEe,GAAG,CAAK,CACzB,GAAMC,SAAQ,CACVd,QAAQ,GAAKF,IAAI,EAAII,YAAY,CAACM,MAAM,GAAKK,GAAG,CACpD,mBACI,aAEI,SAAS,CAAC,MAAM,CAChB,GAAG,CAAEC,QAAQ,CAAGJ,UAAU,CAAG,IAAK,WACjCI,QAAQ,cACL,aACI,GAAG,CAAEH,QAAS,CACd,EAAE,CAAC,OAAO,CACV,SAAS,CAAC,OAAO,CACjB,KAAK,CAAE,CACHI,IAAI,CAAEhB,SAAS,CAACS,MAAM,CAAG,OAC7B,CAAE,eAEC,CACP,IAAI,CACPV,IAAI,CAACW,KAAK,CAAC,EAAE,CAAC,CAACG,GAAG,CAAC,SAACI,IAAI,CAAEC,MAAM,CAAK,CAClC,mBAAO,sBAA2BD,IAAI,EAApBA,IAAI,CAAGC,MAAM,CAAe,CAClD,CAAC,CAAC,CACDH,QAAQ,CACHR,YAAY,CAACM,GAAG,CAAC,SAACI,IAAI,CAAEC,MAAM,CAAK,CAC/B,mBACI,aAEI,SAAS,CAAC,aAAa,UACtBD,IAAI,EAFAA,IAAI,CAAGC,MAAM,CAGf,CAEf,CAAC,CAAC,CACFf,YAAY,CAACW,GAAG,CAAC,CACjBX,YAAY,CAACW,GAAG,CAAC,CACZN,KAAK,CAACN,QAAQ,CAACY,GAAG,CAAC,CAACL,MAAM,CAAC,CAC3BC,KAAK,CAAC,EAAE,CAAC,CACTG,GAAG,CAAC,SAACI,IAAI,CAAEC,MAAM,CAAK,CACnB,mBACI,aAEI,SAAS,CAAC,aAAa,UACtBD,IAAI,EAFAA,IAAI,CAAGC,MAAM,CAGf,CAEf,CAAC,CAAC,CACN,IAAI,GAxCLnB,IAAI,CAAGe,GAAG,CAyCb,CAEd,CAAC,CAAC,EACA,GACJ,CAEd"},"metadata":{},"sourceType":"module","externalDependencies":[]}