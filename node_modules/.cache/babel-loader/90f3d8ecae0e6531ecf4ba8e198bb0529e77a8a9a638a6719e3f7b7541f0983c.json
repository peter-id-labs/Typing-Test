{"ast":null,"code":"var _jsxFileName = \"D:\\\\Belajar\\\\typing-test\\\\src\\\\components\\\\Test.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setRef, setCaretRef } from \"store/actions\";\nimport \"stylesheets/Test.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n  const {\n    word: {\n      typedWord,\n      currWord,\n      wordList,\n      typedHistory\n    },\n    time: {\n      timer\n    }\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const extraLetters = typedWord.slice(currWord.length).split(\"\");\n  const activeWord = useRef(null);\n  const caretRef = useRef(null);\n  useEffect(() => {\n    dispatch(setRef(activeWord));\n    dispatch(setCaretRef(caretRef));\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: wordList.map((word, idx) => {\n        const isActive = currWord === word && typedHistory.length === idx;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word\",\n          ref: isActive ? activeWord : null,\n          children: [isActive ? /*#__PURE__*/_jsxDEV(\"span\", {\n            ref: caretRef,\n            id: \"caret\",\n            className: \"blink\",\n            style: {\n              left: typedWord.length * 14.5833\n            },\n            children: \"|\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 33\n          }, this) : null, word.split(\"\").map((char, charId) => {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              children: char\n            }, char + charId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 40\n            }, this);\n          }), isActive ? extraLetters.map((char, charId) => {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"wrong extra\",\n              children: char\n            }, char + charId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 43\n            }, this);\n          }) : typedHistory[idx] ? typedHistory[idx].slice(wordList[idx].length).split(\"\").map((char, charId) => {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"wrong extra\",\n              children: char\n            }, char + charId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 47\n            }, this);\n          }) : null]\n        }, word + idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_s(Test, \"LznmWZX35aIdz0eTDuFPfaV0TUc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["useEffect","useRef","useDispatch","useSelector","setRef","setCaretRef","Test","word","typedWord","currWord","wordList","typedHistory","time","timer","state","dispatch","extraLetters","slice","length","split","activeWord","caretRef","map","idx","isActive","left","char","charId"],"sources":["D:/Belajar/typing-test/src/components/Test.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setRef, setCaretRef } from \"store/actions\";\r\nimport { State } from \"store/reducer\";\r\nimport \"stylesheets/Test.scss\";\r\n\r\nexport default function Test() {\r\n    const {\r\n        word: { typedWord, currWord, wordList, typedHistory },\r\n        time: { timer },\r\n    } = useSelector((state: State) => state);\r\n    const dispatch = useDispatch();\r\n    const extraLetters = typedWord.slice(currWord.length).split(\"\");\r\n    const activeWord = useRef<HTMLDivElement>(null);\r\n    const caretRef = useRef<HTMLSpanElement>(null);\r\n\r\n    useEffect(() => {\r\n        dispatch(setRef(activeWord));\r\n        dispatch(setCaretRef(caretRef));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"test\">\r\n            <div className=\"timer\">{timer}</div>\r\n            <div className=\"box\">\r\n                {wordList.map((word, idx) => {\r\n                    const isActive =\r\n                        currWord === word && typedHistory.length === idx;\r\n                    return (\r\n                        <div\r\n                            key={word + idx}\r\n                            className=\"word\"\r\n                            ref={isActive ? activeWord : null}>\r\n                            {isActive ? (\r\n                                <span\r\n                                    ref={caretRef}\r\n                                    id=\"caret\"\r\n                                    className=\"blink\"\r\n                                    style={{\r\n                                        left: typedWord.length * 14.5833,\r\n                                    }}>\r\n                                    |\r\n                                </span>\r\n                            ) : null}\r\n                            {word.split(\"\").map((char, charId) => {\r\n                                return <span key={char + charId}>{char}</span>;\r\n                            })}\r\n                            {isActive\r\n                                ? extraLetters.map((char, charId) => {\r\n                                      return (\r\n                                          <span\r\n                                              key={char + charId}\r\n                                              className=\"wrong extra\">\r\n                                              {char}\r\n                                          </span>\r\n                                      );\r\n                                  })\r\n                                : typedHistory[idx]\r\n                                ? typedHistory[idx]\r\n                                      .slice(wordList[idx].length)\r\n                                      .split(\"\")\r\n                                      .map((char, charId) => {\r\n                                          return (\r\n                                              <span\r\n                                                  key={char + charId}\r\n                                                  className=\"wrong extra\">\r\n                                                  {char}\r\n                                              </span>\r\n                                          );\r\n                                      })\r\n                                : null}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}