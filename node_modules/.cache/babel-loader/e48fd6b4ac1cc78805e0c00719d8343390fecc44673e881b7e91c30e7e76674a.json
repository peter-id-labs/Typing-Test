{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { SET_CHAR, SET_WORD, TIMER_DECREMENT, TIMERID_SET, TIMER_SET, APPEND_TYPED_HISTORY, PREV_WORD, SET_WORDLIST, SET_THEME, SET_TIME, SET_REF, SET_CARET_REF, SET_TYPE } from \"./actions\";\nexport const initialState = {\n  preferences: {\n    theme: \"\",\n    timeLimit: 0,\n    type: \"\"\n  },\n  word: {\n    currWord: \"\",\n    typedWord: \"\",\n    typedHistory: [],\n    wordList: [],\n    activeWordRef: null,\n    caretRef: null\n  },\n  time: {\n    timer: 1,\n    timerId: null\n  }\n};\nconst timerReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.time;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  switch (type) {\n    case TIMER_DECREMENT:\n      return {\n        ...state,\n        timer: state.timer - 1\n      };\n    case TIMER_SET:\n      return {\n        ...state,\n        timer: payload\n      };\n    case TIMERID_SET:\n      return {\n        ...state,\n        timerId: payload\n      };\n    default:\n      return state;\n  }\n};\nconst wordReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.word;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  switch (type) {\n    case SET_CHAR:\n      return {\n        ...state,\n        typedWord: payload\n      };\n    case SET_WORD:\n      return {\n        ...state,\n        typedHistory: [...state.typedHistory, payload]\n      };\n    case APPEND_TYPED_HISTORY:\n      const nextIdx = state.typedHistory.length + 1;\n      return {\n        ...state,\n        typedWord: \"\",\n        currWord: state.wordList[nextIdx],\n        typedHistory: [...state.typedHistory, state.typedWord]\n      };\n    case PREV_WORD:\n      const prevIdx = state.typedHistory.length - 1;\n      return {\n        ...state,\n        currWord: state.wordList[prevIdx],\n        typedWord: !payload ? state.typedHistory[prevIdx] : \"\",\n        typedHistory: state.typedHistory.splice(0, prevIdx)\n      };\n    case SET_REF:\n      return {\n        ...state,\n        activeWordRef: payload\n      };\n    case SET_CARET_REF:\n      return {\n        ...state,\n        caretRef: payload\n      };\n    case SET_WORDLIST:\n      const areNotWords = payload.some(word => word.includes(\" \"));\n      var shuffledWordList = payload.sort(() => Math.random() - 0.5);\n      if (areNotWords) shuffledWordList = payload.flatMap(token => token.split(\" \"));\n      return {\n        ...state,\n        typedWord: \"\",\n        typedHistory: [],\n        currWord: shuffledWordList[0],\n        wordList: shuffledWordList\n      };\n    default:\n      return state;\n  }\n};\nconst preferenceReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.preferences;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  switch (type) {\n    case SET_THEME:\n      return {\n        ...state,\n        theme: payload\n      };\n    case SET_TIME:\n      return {\n        ...state,\n        timeLimit: payload\n      };\n    case SET_TYPE:\n      return {\n        ...state,\n        type: payload\n      };\n    default:\n      return state;\n  }\n};\nexport default combineReducers({\n  time: timerReducer,\n  word: wordReducer,\n  preferences: preferenceReducer\n});","map":{"version":3,"names":["combineReducers","SET_CHAR","SET_WORD","TIMER_DECREMENT","TIMERID_SET","TIMER_SET","APPEND_TYPED_HISTORY","PREV_WORD","SET_WORDLIST","SET_THEME","SET_TIME","SET_REF","SET_CARET_REF","SET_TYPE","initialState","preferences","theme","timeLimit","type","word","currWord","typedWord","typedHistory","wordList","activeWordRef","caretRef","time","timer","timerId","timerReducer","state","payload","wordReducer","nextIdx","length","prevIdx","splice","areNotWords","some","includes","shuffledWordList","sort","Math","random","flatMap","token","split","preferenceReducer"],"sources":["D:/Belajar/typing-test/src/store/reducer.ts"],"sourcesContent":["import { RefObject } from \"react\";\r\nimport { AnyAction, combineReducers } from \"redux\";\r\nimport {\r\n    SET_CHAR,\r\n    SET_WORD,\r\n    TIMER_DECREMENT,\r\n    TIMERID_SET,\r\n    TIMER_SET,\r\n    APPEND_TYPED_HISTORY,\r\n    PREV_WORD,\r\n    SET_WORDLIST,\r\n    SET_THEME,\r\n    SET_TIME,\r\n    SET_REF,\r\n    SET_CARET_REF,\r\n    SET_TYPE,\r\n} from \"./actions\";\r\n\r\nexport interface State {\r\n    preferences: {\r\n        theme: string;\r\n        timeLimit: number;\r\n        type: string;\r\n    };\r\n    word: {\r\n        currWord: string;\r\n        typedWord: string;\r\n        typedHistory: string[];\r\n        wordList: string[];\r\n        activeWordRef: RefObject<HTMLDivElement> | null;\r\n        caretRef: RefObject<HTMLSpanElement> | null;\r\n    };\r\n    time: {\r\n        timer: number;\r\n        timerId: NodeJS.Timeout | null;\r\n    };\r\n}\r\n\r\nexport const initialState: State = {\r\n    preferences: {\r\n        theme: \"\",\r\n        timeLimit: 0,\r\n        type: \"\",\r\n    },\r\n    word: {\r\n        currWord: \"\",\r\n        typedWord: \"\",\r\n        typedHistory: [],\r\n        wordList: [],\r\n        activeWordRef: null,\r\n        caretRef: null,\r\n    },\r\n    time: {\r\n        timer: 1,\r\n        timerId: null,\r\n    },\r\n};\r\n\r\nconst timerReducer = (\r\n    state = initialState.time,\r\n    { type, payload }: AnyAction\r\n) => {\r\n    switch (type) {\r\n        case TIMER_DECREMENT:\r\n            return { ...state, timer: state.timer - 1 };\r\n        case TIMER_SET:\r\n            return { ...state, timer: payload };\r\n        case TIMERID_SET:\r\n            return { ...state, timerId: payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst wordReducer = (\r\n    state = initialState.word,\r\n    { type, payload }: AnyAction\r\n) => {\r\n    switch (type) {\r\n        case SET_CHAR:\r\n            return { ...state, typedWord: payload };\r\n        case SET_WORD:\r\n            return { ...state, typedHistory: [...state.typedHistory, payload] };\r\n        case APPEND_TYPED_HISTORY:\r\n            const nextIdx = state.typedHistory.length + 1;\r\n            return {\r\n                ...state,\r\n                typedWord: \"\",\r\n                currWord: state.wordList[nextIdx],\r\n                typedHistory: [...state.typedHistory, state.typedWord],\r\n            };\r\n        case PREV_WORD:\r\n            const prevIdx = state.typedHistory.length - 1;\r\n            return {\r\n                ...state,\r\n                currWord: state.wordList[prevIdx],\r\n                typedWord: !payload ? state.typedHistory[prevIdx] : \"\",\r\n                typedHistory: state.typedHistory.splice(0, prevIdx),\r\n            };\r\n        case SET_REF:\r\n            return {\r\n                ...state,\r\n                activeWordRef: payload,\r\n            };\r\n        case SET_CARET_REF:\r\n            return {\r\n                ...state,\r\n                caretRef: payload,\r\n            };\r\n        case SET_WORDLIST:\r\n            const areNotWords = payload.some((word: string) =>\r\n                word.includes(\" \")\r\n            );\r\n            var shuffledWordList: string[] = payload.sort(\r\n                () => Math.random() - 0.5\r\n            );\r\n            if (areNotWords)\r\n                shuffledWordList = payload.flatMap((token: string) =>\r\n                    token.split(\" \")\r\n                );\r\n            return {\r\n                ...state,\r\n                typedWord: \"\",\r\n                typedHistory: [],\r\n                currWord: shuffledWordList[0],\r\n                wordList: shuffledWordList,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst preferenceReducer = (\r\n    state = initialState.preferences,\r\n    { type, payload }: AnyAction\r\n) => {\r\n    switch (type) {\r\n        case SET_THEME:\r\n            return { ...state, theme: payload };\r\n        case SET_TIME:\r\n            return {\r\n                ...state,\r\n                timeLimit: payload,\r\n            };\r\n        case SET_TYPE:\r\n            return {\r\n                ...state,\r\n                type: payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default combineReducers({\r\n    time: timerReducer,\r\n    word: wordReducer,\r\n    preferences: preferenceReducer,\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}