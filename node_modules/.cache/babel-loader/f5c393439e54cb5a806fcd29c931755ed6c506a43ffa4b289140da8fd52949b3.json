{"ast":null,"code":"var _jsxFileName = \"D:\\\\Belajar\\\\typing-test\\\\src\\\\components\\\\CommandPallet.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport styles from \"stylesheets/CommandPallet.module.scss\";\nimport { options } from \"./Header\";\nimport { useDispatch } from \"react-redux\";\nimport { setTime, setTheme, setType } from \"store/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommandPallet(props) {\n  _s();\n  const [palletText, setPalletText] = useState(\"\");\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [highlightedOption, setHighlightedOption] = useState(0);\n  const [commandList, setCommandList] = useState([]);\n  const dispatch = useDispatch();\n  const palletTextBox = useRef(null);\n  useEffect(() => {\n    document.onclick = () => {\n      props.setShowPallet(s => !s);\n      console.log(\"heere\");\n    };\n    return () => {\n      document.onclick = null;\n    };\n  }, [props]);\n  useEffect(() => {\n    if (!selectedOption) {\n      setCommandList(Object.keys(options).filter(option => option.includes(palletText.toLowerCase())));\n    } else {\n      const commands = options[selectedOption].map(o => o.toString());\n      setCommandList(commands.filter(option => option.includes(palletText.toLowerCase())));\n    }\n    setHighlightedOption(0);\n  }, [palletText, selectedOption]);\n  const handleCommandSelection = command => {\n    setPalletText(\"\");\n    if (!command) return;\n    if (!selectedOption) {\n      setSelectedOption(command);\n      return;\n    }\n    switch (selectedOption) {\n      case \"time\":\n        dispatch(setTime(+command));\n        break;\n      case \"theme\":\n        dispatch(setTheme(command));\n        break;\n      case \"type\":\n        dispatch(setType(command));\n        break;\n      default:\n        console.log(selectedOption, command);\n    }\n    props.setShowPallet(false);\n  };\n  const handlePalletKeys = e => {\n    if (e.key === \"ArrowUp\") {\n      setHighlightedOption(op => op > 0 ? op - 1 : op);\n    } else if (e.key === \"ArrowDown\") {\n      setHighlightedOption(op => op < commandList.length - 1 ? op + 1 : op);\n    } else if (e.key === \"Enter\") {\n      const command = commandList[highlightedOption];\n      handleCommandSelection(command);\n    } else if (e.key === \"Escape\") {\n      props.setShowPallet(false);\n    }\n    e.stopPropagation();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.commandPallet,\n    onKeyDown: handlePalletKeys,\n    onClick: e => e.stopPropagation(),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: palletTextBox,\n      type: \"text\",\n      className: styles.commandInput,\n      placeholder: \"Type to search\",\n      value: palletText,\n      autoFocus: true,\n      onChange: e => setPalletText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.commandList,\n      children: commandList.map((option, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.command} ${highlightedOption === idx && styles.highlighted}`,\n        onClick: () => handleCommandSelection(option),\n        children: option\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(CommandPallet, \"KjassvwK+U1rju8iLhPQwPAYg8E=\", false, function () {\n  return [useDispatch];\n});\n_c = CommandPallet;\nvar _c;\n$RefreshReg$(_c, \"CommandPallet\");","map":{"version":3,"names":["useEffect","useState","useRef","styles","options","useDispatch","setTime","setTheme","setType","CommandPallet","props","palletText","setPalletText","selectedOption","setSelectedOption","highlightedOption","setHighlightedOption","commandList","setCommandList","dispatch","palletTextBox","document","onclick","setShowPallet","s","console","log","Object","keys","filter","option","includes","toLowerCase","commands","map","o","toString","handleCommandSelection","command","handlePalletKeys","e","key","op","length","stopPropagation","commandPallet","commandInput","target","value","idx","highlighted"],"sources":["D:/Belajar/typing-test/src/components/CommandPallet.tsx"],"sourcesContent":["import { KeyboardEvent, useEffect, useState, useRef } from \"react\";\r\nimport styles from \"stylesheets/CommandPallet.module.scss\";\r\nimport { options, Options } from \"./Header\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setTime, setTheme, setType } from \"store/actions\";\r\n\r\ninterface Props {\r\n    setShowPallet: Function;\r\n}\r\n\r\nexport default function CommandPallet(props: Props) {\r\n    const [palletText, setPalletText] = useState(\"\");\r\n    const [selectedOption, setSelectedOption] = useState(\"\");\r\n    const [highlightedOption, setHighlightedOption] = useState(0);\r\n    const [commandList, setCommandList] = useState<string[]>([]);\r\n    const dispatch = useDispatch();\r\n    const palletTextBox = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        document.onclick = () => {\r\n            props.setShowPallet((s: boolean) => !s);\r\n            console.log(\"heere\");\r\n        };\r\n        return () => {\r\n            document.onclick = null;\r\n        };\r\n    }, [props]);\r\n\r\n    useEffect(() => {\r\n        if (!selectedOption) {\r\n            setCommandList(\r\n                Object.keys(options).filter((option) =>\r\n                    option.includes(palletText.toLowerCase())\r\n                )\r\n            );\r\n        } else {\r\n            const commands: Array<string> = options[\r\n                selectedOption as keyof Options\r\n            ].map((o) => o.toString());\r\n            setCommandList(\r\n                commands.filter((option: string) =>\r\n                    option.includes(palletText.toLowerCase())\r\n                )\r\n            );\r\n        }\r\n        setHighlightedOption(0);\r\n    }, [palletText, selectedOption]);\r\n\r\n    const handleCommandSelection = (command: string) => {\r\n        setPalletText(\"\");\r\n        if (!command) return;\r\n        if (!selectedOption) {\r\n            setSelectedOption(command);\r\n            return;\r\n        }\r\n        switch (selectedOption) {\r\n            case \"time\":\r\n                dispatch(setTime(+command));\r\n                break;\r\n            case \"theme\":\r\n                dispatch(setTheme(command));\r\n                break;\r\n            case \"type\":\r\n                dispatch(setType(command));\r\n                break;\r\n            default:\r\n                console.log(selectedOption, command);\r\n        }\r\n        props.setShowPallet(false);\r\n    };\r\n\r\n    const handlePalletKeys = (e: KeyboardEvent) => {\r\n        if (e.key === \"ArrowUp\") {\r\n            setHighlightedOption((op) => (op > 0 ? op - 1 : op));\r\n        } else if (e.key === \"ArrowDown\") {\r\n            setHighlightedOption((op) =>\r\n                op < commandList.length - 1 ? op + 1 : op\r\n            );\r\n        } else if (e.key === \"Enter\") {\r\n            const command = commandList[highlightedOption];\r\n            handleCommandSelection(command);\r\n        } else if (e.key === \"Escape\") {\r\n            props.setShowPallet(false);\r\n        }\r\n        e.stopPropagation();\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={styles.commandPallet}\r\n            onKeyDown={handlePalletKeys}\r\n            onClick={(e) => e.stopPropagation()}>\r\n            <input\r\n                ref={palletTextBox}\r\n                type=\"text\"\r\n                className={styles.commandInput}\r\n                placeholder=\"Type to search\"\r\n                value={palletText}\r\n                autoFocus\r\n                onChange={(e) => setPalletText(e.target.value)}\r\n            />\r\n            <div className={styles.commandList}>\r\n                {commandList!.map((option, idx) => (\r\n                    <div\r\n                        className={`${styles.command} ${\r\n                            highlightedOption === idx && styles.highlighted\r\n                        }`}\r\n                        key={idx}\r\n                        onClick={() => handleCommandSelection(option)}>\r\n                        {option}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}