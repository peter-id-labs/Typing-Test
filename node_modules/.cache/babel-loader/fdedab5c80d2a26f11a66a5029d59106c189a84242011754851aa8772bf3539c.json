{"ast":null,"code":"import { appendTypedHistory, backtrackWord, setChar, setTypedWord } from \"store/actions\";\nimport { store } from \"store/store\";\nimport { resetTest } from \"./resetTest\";\nimport { startTimer } from \"./startTimer\";\nconst handleBackspace = ctrlKey => {\n  const {\n    dispatch,\n    getState\n  } = store;\n  const {\n    word: {\n      typedWord,\n      activeWordRef,\n      typedHistory,\n      wordList\n    }\n  } = getState();\n  const currIdx = typedHistory.length - 1;\n  const currWordEl = activeWordRef === null || activeWordRef === void 0 ? void 0 : activeWordRef.current;\n  if (!typedWord && typedHistory[currIdx] !== wordList[currIdx]) {\n    dispatch(backtrackWord(ctrlKey));\n    currWordEl.previousElementSibling.classList.remove(\"right\", \"wrong\");\n    if (ctrlKey) {\n      currWordEl.previousElementSibling.childNodes.forEach(char => {\n        char.classList.remove(\"wrong\", \"right\");\n      });\n    }\n  } else {\n    if (ctrlKey) {\n      dispatch(setTypedWord(\"\"));\n      currWordEl.childNodes.forEach(char => {\n        char.classList.remove(\"wrong\", \"right\");\n      });\n    } else {\n      const newTypedWord = typedWord.slice(0, typedWord.length - 1);\n      dispatch(setTypedWord(newTypedWord));\n    }\n  }\n};\nexport const recordTest = (key, ctrlKey) => {\n  const {\n    dispatch,\n    getState\n  } = store;\n  const {\n    time: {\n      timer,\n      timerId\n    },\n    word: {\n      typedWord,\n      currWord,\n      activeWordRef,\n      caretRef\n    },\n    preferences: {\n      timeLimit\n    }\n  } = getState();\n  if (!timer) {\n    if (key === \"Tab\") {\n      resetTest();\n    }\n    return;\n  }\n  if (!timerId && key !== \"Tab\") startTimer();\n  const currWordEl = activeWordRef === null || activeWordRef === void 0 ? void 0 : activeWordRef.current;\n  currWordEl.scrollIntoView({\n    behavior: \"smooth\",\n    block: \"center\"\n  });\n  const caret = caretRef === null || caretRef === void 0 ? void 0 : caretRef.current;\n  caret.classList.remove(\"blink\");\n  setTimeout(() => caret.classList.add(\"blink\"), 500);\n  switch (key) {\n    case \"Tab\":\n      if (timer !== timeLimit || timerId) {\n        resetTest();\n        document.getElementsByClassName(\"word\")[0].scrollIntoView();\n      }\n      break;\n    case \" \":\n      if (typedWord === \"\") return;\n      currWordEl.classList.add(typedWord !== currWord ? \"wrong\" : \"right\");\n      dispatch(appendTypedHistory());\n      break;\n    case \"Backspace\":\n      handleBackspace(ctrlKey);\n      break;\n    default:\n      dispatch(setChar(typedWord + key));\n      break;\n  }\n};","map":{"version":3,"names":["appendTypedHistory","backtrackWord","setChar","setTypedWord","store","resetTest","startTimer","handleBackspace","ctrlKey","dispatch","getState","word","typedWord","activeWordRef","typedHistory","wordList","currIdx","length","currWordEl","current","previousElementSibling","classList","remove","childNodes","forEach","char","newTypedWord","slice","recordTest","key","time","timer","timerId","currWord","caretRef","preferences","timeLimit","scrollIntoView","behavior","block","caret","setTimeout","add","document","getElementsByClassName"],"sources":["D:/Belajar/typing-test/src/helpers/recordTest.ts"],"sourcesContent":["import {\r\n    appendTypedHistory,\r\n    backtrackWord,\r\n    setChar,\r\n    setTypedWord,\r\n} from \"store/actions\";\r\nimport { store } from \"store/store\";\r\nimport { resetTest } from \"./resetTest\";\r\nimport { startTimer } from \"./startTimer\";\r\n\r\nconst handleBackspace = (ctrlKey: boolean) => {\r\n    const { dispatch, getState } = store;\r\n    const {\r\n        word: { typedWord, activeWordRef, typedHistory, wordList },\r\n    } = getState();\r\n    const currIdx = typedHistory.length - 1;\r\n    const currWordEl = activeWordRef?.current!;\r\n    if (!typedWord && typedHistory[currIdx] !== wordList[currIdx]) {\r\n        dispatch(backtrackWord(ctrlKey));\r\n        currWordEl.previousElementSibling!.classList.remove(\"right\", \"wrong\");\r\n        if (ctrlKey) {\r\n            currWordEl.previousElementSibling!.childNodes.forEach(\r\n                (char: HTMLSpanElement) => {\r\n                    char.classList.remove(\"wrong\", \"right\");\r\n                }\r\n            );\r\n        }\r\n    } else {\r\n        if (ctrlKey) {\r\n            dispatch(setTypedWord(\"\"));\r\n            currWordEl.childNodes.forEach((char: HTMLSpanElement) => {\r\n                char.classList.remove(\"wrong\", \"right\");\r\n            });\r\n        } else {\r\n            const newTypedWord = typedWord.slice(0, typedWord.length - 1);\r\n            dispatch(setTypedWord(newTypedWord));\r\n        }\r\n    }\r\n};\r\n\r\nexport const recordTest = (key: string, ctrlKey: boolean) => {\r\n    const { dispatch, getState } = store;\r\n    const {\r\n        time: { timer, timerId },\r\n        word: { typedWord, currWord, activeWordRef, caretRef },\r\n        preferences: { timeLimit },\r\n    } = getState();\r\n\r\n    if (!timer) {\r\n        if (key === \"Tab\") {\r\n            resetTest();\r\n        }\r\n        return;\r\n    }\r\n    if (!timerId && key !== \"Tab\") startTimer();\r\n    const currWordEl = activeWordRef?.current!;\r\n    currWordEl.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n    const caret = caretRef?.current!;\r\n    caret.classList.remove(\"blink\");\r\n    setTimeout(() => caret.classList.add(\"blink\"), 500);\r\n    switch (key) {\r\n        case \"Tab\":\r\n            if (timer !== timeLimit || timerId) {\r\n                resetTest();\r\n                document.getElementsByClassName(\"word\")[0].scrollIntoView();\r\n            }\r\n            break;\r\n        case \" \":\r\n            if (typedWord === \"\") return;\r\n            currWordEl.classList.add(\r\n                typedWord !== currWord ? \"wrong\" : \"right\"\r\n            );\r\n            dispatch(appendTypedHistory());\r\n            break;\r\n        case \"Backspace\":\r\n            handleBackspace(ctrlKey);\r\n            break;\r\n        default:\r\n            dispatch(setChar(typedWord + key));\r\n            break;\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}